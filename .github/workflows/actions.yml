name: Generate ISO Pipelines

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: install host dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install debootstrap qemu qemu-user-static

        # Create IMG
        dd if=/dev/zero of=raw.img bs=512 count=5443618
        sfdisk raw.img <<EOF
        label: gpt
        sector-size: 512
         : start=        4096, size=      524288, name=RASPIFIRM, type=uefi
         : start=      528384, size=     4915200, name=RASPIROOT, type=linux
        EOF

        sudo losetup -Pf raw.img
        LOOP=$(losetup -j raw.img | grep -o "/dev/loop[0-9]*")
        echo $ld
        sudo mkfs.fat -F 32 ${LOOP}p1
        sudo mkfs.ext4 -U 059e5dd5-2b6a-4509-bbc4-cbe7b357f7dc ${LOOP}p2

        sudo fatlabel ${LOOP}p1 RASPIFIRM
        sudo e2label ${LOOP}p2 RASPIROOT

        ROOTFS=/tmp/rootfs
        mkdir -p $ROOTFS

        sudo mount ${LOOP}p2 $ROOTFS
        mkdir -p $ROOTFS/boot/firmware
        sudo mount ${LOOP}p1 $ROOTFS/boot/firmware
        mkdir -p $ROOTFS/{boot,var/lib/iwd,etc/{network,default}}

        debootstrap \
            --include=sudo,wireplumber,pipewire-alsa,mesa-vulkan-drivers,build-essential,fish,gpg,gpgconf,gpg-agent,locales,vim,dbus,dbus-user-session,systemd,systemd-sysv,bluetooth,libspa-0.2-bluetooth,ca-certificates,dosfstools,systemd-timesyncd,ssh,fdisk,wget,iwd,linux-image-arm64,kmod,raspi-firmware,firmware-brcm80211,bluez-firmware \
            --components=main,contrib,non-free,non-free-firmware \
            --variant=minbase \
            --arch arm64 \
            --merged-usr \
            --foreign \
            sid \
            $ROOTFS https://deb.debian.org/debian

        cat << EOF | tee -a $ROOTFS/etc/fstab
        # The root file system has fs_passno=1 as per fstab(5) for automatic fsck.
        LABEL=RASPIROOT / ext4 rw 0 1
        # All other file systems have fs_passno=2 as per fstab(5) for automatic fsck.
        LABEL=RASPIFIRM /boot/firmware vfat rw 0 2
        EOF

        cat << EOF | tee -a $ROOTFS/var/lib/iwd/ScoobyDoo-5G.psk
        [Security]
        Passphrase=scooby8827695
        PreSharedKey=2e8a5b61c669d1c18c5c30ff9bbf831ec5c79e186815841e86e42c22266b59d6

        [Settings]
        AutoConnect=true
        EOF

        mkdir -p $ROOTFS/etc/skel
        touch $ROOTFS/etc/skel/.zshrc
        cat << EOF | tee -a $ROOTFS/etc/skel/.profile
        if [ "$BASH" ]; then
            if [ -f ~/.bashrc ]; then
              . ~/.bashrc
            fi
        fi

        # set PATH so it includes user's private bin if it exists
        if [ -d "$HOME/bin" ] ; then
            PATH="$HOME/bin:$PATH"
        fi
        EOF

        sudo mount -t proc proc $ROOTFS/proc
        sudo mount -t sysfs sysfs $ROOTFS/sys
        sudo mount -t devtmpfs devtmpfs $ROOTFS/dev
        sudo mount -t devpts devpts $ROOTFS/dev/pts
        sudo mount -t tmpfs tmpfs $ROOTFS/tmp
        
        cp /usr/bin/qemu-aarch64-static $ROOTFS/usr/bin 

        sudo chroot $ROOTFS <<EOF
        /debootstrap/debootstrap --second-stage

        
        adduser -m debian
        usermod -G sudo,video,audio,www debian
        chpasswd <<<debian:debian
        
        chpasswd <<<root:root
        ln -s /usr/lib/systemd/system/iwd.service /etc/systemd/system/multi-user.target.requires/iwd.service

        sed -i -e "s|^# en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|" /etc/locale.gen
        locale-gen --purge en_US.UTF-8
        
        sed -i "s|cma=64M ||" /boot/firmware/cmdline.txt
        sed -i "s|root=${LOOP}p2|root=LABEL=RASPIROOT|" /boot/firmware/cmdline.txt
        sed -i "s|^#ROOTPART=.*|ROOTPART=LABEL=RASPIROOT|" /etc/default/raspi-firmware
        sed -i "s|^#EnableNetworkConfiguration|EnableNetworkConfiguration|" /etc/iwd/main.conf

        dpkg-reconfigure raspi-firmware
        EOF

        # LOG="/debootstrap/debootstrap.log"
        # [ -f "$LOG" ] && cat $LOG

    - name: Upload Image Artifact
      uses: actions/upload-artifact@v3
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        path: raw.img
        name: artifacts
